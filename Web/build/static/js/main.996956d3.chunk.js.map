{"version":3,"sources":["logo.svg","Calendar.js","login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CalendarWidget","props","onChange","date","setState","state","Date","this","value","React","Component","Login","username","password","loggedIn","onUsername","bind","onPassword","login","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","responseJson","text","e","preventDefault","target","className","htmlFor","type","id","placeholder","onClick","ShiftSaver","onLogin","toView","loggenIn","Calendar","onLoggedIn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,kLC0B5BC,E,YAtBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,SAAW,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAAED,UALjC,EAAKE,MAAQ,CACXF,KAAM,IAAIG,MAJK,E,sEAWjB,OACE,6BACE,kBAAC,IAAD,CACEJ,SAAUK,KAAKL,SACfM,MAAOD,KAAKF,MAAMF,Y,GAhBCM,IAAMC,WC8EpBC,E,YA5Eb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CACVO,SAAS,GACTC,SAAS,GACTC,UAAS,GAEZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBATI,E,qEAYV,IAAD,OAEN,OADAG,QAAQC,IAAI,4BACLC,MAAM,SAAU,CACrBC,OAAO,OACPC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBf,SAAUL,KAAKF,MAAMO,SACrBC,SAAUN,KAAKF,MAAMQ,aAGxBe,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAK3B,SAAS,CACZU,SAAgC,WAAtBiB,EAAaC,Y,iCAMlBC,GACTA,EAAEC,iBACF3B,KAAKH,SAAS,CAAEQ,SAAUqB,EAAEE,OAAO3B,U,iCAG1ByB,GACTA,EAAEC,iBACF3B,KAAKH,SAAS,CAAES,SAAUoB,EAAEE,OAAO3B,U,+BAKnC,OAAKD,KAAKF,MAAMS,SAyBd,sCAvBA,yBAAKsB,UAAU,YACb,0BAAMA,UAAU,aACd,2BAAOC,QAAQ,YAAf,aACA,2BACAC,KAAK,OACLC,GAAG,WACHC,YAAY,iBACZtC,SAAUK,KAAKQ,aAGf,2BAAOsB,QAAQ,YAAf,aACA,2BACAC,KAAK,WACLC,GAAG,WACHC,YAAY,iBACZtC,SAAUK,KAAKU,aAEf,4BAAQqB,KAAK,SAASG,QAASlC,KAAKW,OAApC,e,GAlEUT,IAAMC,WCkCXgC,E,YA/Bb,WAAYzC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDI,MAAQ,CACXS,UAAU,GAEZ,EAAK6B,QAAU,EAAKA,QAAQ3B,KAAb,gBANE,E,qEASXiB,GACN1B,KAAKF,MAAMD,SAAS,CAACU,SAASmB,M,+BAI9B,IAAIW,EAOJ,OAHEA,EAHGrC,KAAKsC,SAGE,kBAACC,EAAD,MAFD,kBAAC,EAAD,CAAOC,WAAYxC,KAAKoC,UAMjC,6BACGC,O,GAxBgBnC,IAAMC,WCMXsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.996956d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\n\r\nclass CalendarWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date(),\r\n    }\r\n  }\r\n\r\n  onChange = date => this.setState({ date })\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Calendar\r\n          onChange={this.onChange}\r\n          value={this.state.date}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarWidget;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n       username:\"\",\r\n       password:\"\",\r\n       loggedIn:false\r\n    };\r\n    this.onUsername = this.onUsername.bind(this);\r\n    this.onPassword = this.onPassword.bind(this);\r\n    this.login = this.login.bind(this);\r\n  }\r\n\r\n  login() {\r\n    console.log(\"well the function ran...\")\r\n    return fetch(\"/login\", {\r\n      method:\"POST\",\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n      })\r\n    })\r\n    .then((response) => response.json())\r\n    .then((responseJson) => {\r\n      this.setState({\r\n        loggedIn: responseJson.text === \"hello!\" ? true : false\r\n      });\r\n    })\r\n    this.props.onLoggedIn(this.state.loggedIn);\r\n  }\r\n\r\n  onUsername(e) {\r\n    e.preventDefault();\r\n    this.setState({ username: e.target.value });\r\n  }\r\n\r\n  onPassword(e) {\r\n    e.preventDefault();\r\n    this.setState({ password: e.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    if (!this.state.loggedIn) {\r\n    return (\r\n      <div className=\"loginDiv\">\r\n        <form className=\"loginForm\">\r\n          <label htmlFor=\"username\">Username:</label>\r\n          <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          placeholder=\"Enter Username\"\r\n          onChange={this.onUsername}\r\n          />\r\n\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          placeholder=\"Enter Password\"\r\n          onChange={this.onPassword}\r\n          />\r\n          <button type=\"button\" onClick={this.login}>Login</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n    return (\r\n      <h1>HELLO!</h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Calendar from './Calendar.js';\nimport Login from './login.js';\n\nclass ShiftSaver extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedIn: false,\n    }\n    this.onLogin = this.onLogin.bind(this);\n  }\n\n  onLogin(e) {\n    this.state.setState({loggedIn:e});\n  }\n\n  render() {\n    let toView;\n    if (!this.loggenIn) {\n      toView = <Login onLoggedIn={this.onLogin}/>;\n    } else {\n      toView =  <Calendar />\n    }\n\n    return (\n      <div>\n        {toView}\n      </div>\n    );\n\n  }\n\n}\n\nexport default ShiftSaver;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}