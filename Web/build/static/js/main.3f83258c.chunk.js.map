{"version":3,"sources":["Calendar.js","Selector.js","Navigation.js","Main.js","login.js","App.js","serviceWorker.js","index.js"],"names":["CalendarWidget","props","onChange","date","setState","state","Date","className","this","value","React","Component","Selector","page","changePage","bind","style","listStyleType","onClick","Navigation","name","Main","fetch","headers","Accept","then","response","json","responseJson","console","log","Calendar","Login","username","password","loggedIn","onUsername","onPassword","login","method","body","JSON","stringify","error","onLoggedIn","catch","err","e","preventDefault","target","id","type","placeholder","ShiftSaver","onLogin","toView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f83258c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Calendar from 'react-calendar';\r\n\r\nclass CalendarWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date(),\r\n    }\r\n  }\r\n\r\n  onChange = date => this.setState({ date })\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calendarDiv\">\r\n        <Calendar\r\n          onChange={this.onChange}\r\n          value={this.state.date}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarWidget;\r\n","import React from 'react';\r\n\r\nclass Selector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page:\"calendar\"\r\n        };\r\n        this.changePage = this.changePage.bind(this);\r\n    }\r\n\r\n    changePage(page) {\r\n        this.setState({page});\r\n    }\r\n\r\n\r\n    render() {\r\n        var listStyle = {\r\n            listStyleType:\"none\"\r\n        };\r\n        return(\r\n            <div className=\"selectorDiv\">\r\n                <ul style={listStyle}>\r\n                    <li onClick={() => this.changePage(\"calendar\")} >Calendar</li>\r\n                    <li onClick={() => this.changePage(\"people\")} >People</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nexport default Selector;","import React from \"react\";\r\n\r\nclass Navigation extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Hello {this.props.name}!</h1>\r\n                <button>Logout, needs to be implemented</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Calendar from './Calendar';\r\nimport './static/css/Main.css';\r\nimport Selector from \"./Selector\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name:\"\"\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch(\"/user/getMyName\", {\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n              }\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            console.log(\"name\", responseJson.name);\r\n            this.setState({name:responseJson.name});\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n          <div className=\"mainDiv\">\r\n            <Navigation name={this.props.name}/>\r\n            <Selector />\r\n            <Calendar />\r\n\r\n            <div className=\"upcomingShiftsDiv\">\r\n                <h1>Upcoming Shifts</h1>\r\n                <ul>\r\n                    <li>list for the next 2? weeks of upcoming shifts</li>\r\n                </ul>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport './static/css/login.css';\r\n\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n       username:\"\",\r\n       password:\"\",\r\n       loggedIn:false\r\n    };\r\n    this.onUsername = this.onUsername.bind(this);\r\n    this.onPassword = this.onPassword.bind(this);\r\n    this.login = this.login.bind(this);\r\n  }\r\n\r\n  login() {\r\n      if (this.state.username === \"admin\" && this.state.password === \"admin\") {\r\n        this.props.onLoggedIn(true);\r\n        return;\r\n      }\r\n    return fetch(\"http://localhost/auth/login\", {\r\n      method:\"POST\",\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n      })\r\n    })\r\n    .then((response) => response.json())\r\n    .then((responseJson) => {\r\n      if (responseJson.error === true) {\r\n          console.log(\"Error: idk\");\r\n      } else {\r\n        this.setState({\r\n          loggedIn: responseJson.login\r\n      });\r\n      }\r\n      this.props.onLoggedIn(this.state.loggedIn);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error: unable to connect to server\");\r\n    })\r\n  }\r\n\r\n  onUsername(e) {\r\n    e.preventDefault();\r\n    this.setState({ username: e.target.value });\r\n  }\r\n\r\n  onPassword(e) {\r\n    e.preventDefault();\r\n    this.setState({ password: e.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"loginDiv\">\r\n        <h1 id=\"welcomeText\">Welcome!</h1>\r\n        <form className=\"loginForm\">\r\n\r\n          <div className=\"usernameDiv\">\r\n            <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            placeholder=\"Enter Username\"\r\n            onChange={this.onUsername}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"passwordDiv\">\r\n            <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            onChange={this.onPassword}\r\n            />\r\n          </div>\r\n          <button type=\"button\" onClick={this.login}>Login</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport './static/css/App.css';\r\nimport Main from './Main.js';\r\nimport Login from './login.js';\r\n\r\nclass ShiftSaver extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loggedIn: false,\r\n    }\r\n    this.onLogin = this.onLogin.bind(this);\r\n  }\r\n\r\n  onLogin(e) {\r\n    this.setState({loggedIn:e});\r\n  }\r\n\r\n  render() {\r\n    var toView = !this.state.loggedIn ? <Login onLoggedIn={this.onLogin}/>:<Main />;\r\n\r\n    return (\r\n      <div>\r\n        {toView}\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default ShiftSaver;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}