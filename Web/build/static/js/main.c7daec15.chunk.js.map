{"version":3,"sources":["Calendar.js","Main.js","login.js","App.js","serviceWorker.js","index.js"],"names":["CalendarWidget","props","onChange","date","setState","state","Date","this","value","React","Component","Main","className","Calendar","Login","username","password","loggedIn","onUsername","bind","onPassword","login","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","responseJson","error","onLoggedIn","catch","err","e","preventDefault","target","id","type","placeholder","onClick","ShiftSaver","onLogin","toView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVA0BeA,E,YAtBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,SAAW,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAAED,UALjC,EAAKE,MAAQ,CACXF,KAAM,IAAIG,MAJK,E,sEAWjB,OACE,6BACE,kBAAC,IAAD,CACEJ,SAAUK,KAAKL,SACfM,MAAOD,KAAKF,MAAMF,Y,GAhBCM,IAAMC,WCyBpBC,G,kBAvBX,WAAYV,GAAQ,qEACVA,I,sEAIN,OACE,yBAAKW,UAAU,WACX,yBAAKA,UAAU,eACX,kBAACC,EAAD,OAGJ,yBAAKD,UAAU,qBACX,+CACA,4BACI,oF,GAfHH,IAAMC,YCoFVI,G,kBAlFb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CACVU,SAAS,GACTC,SAAS,GACTC,UAAS,GAEZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBATI,E,qEAYV,IAAD,OAEN,OADAG,QAAQC,IAAI,4BACLC,MAAM,SAAU,CACrBC,OAAO,OACPC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBf,SAAUR,KAAKF,MAAMU,SACrBC,SAAUT,KAAKF,MAAMW,aAGxBe,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,GAA0B,GAAtBA,EAAaC,MACb,KAAM,QAER,EAAK/B,SAAS,CACZa,SAAUiB,EAAab,QAG3B,EAAKpB,MAAMmC,WAAW,EAAK/B,MAAMY,aAElCoB,OAAM,SAACC,GACNhB,QAAQC,IAAI,qC,iCAILgB,GACTA,EAAEC,iBACFjC,KAAKH,SAAS,CAAEW,SAAUwB,EAAEE,OAAOjC,U,iCAG1B+B,GACTA,EAAEC,iBACFjC,KAAKH,SAAS,CAAEY,SAAUuB,EAAEE,OAAOjC,U,+BAKnC,OACE,yBAAKI,UAAU,YACb,wBAAI8B,GAAG,eAAP,YACA,0BAAM9B,UAAU,aAEd,yBAAKA,UAAU,eACb,2BACA+B,KAAK,OACLD,GAAG,WACHE,YAAY,iBACZ1C,SAAUK,KAAKW,cAIjB,yBAAKN,UAAU,eACb,2BACA+B,KAAK,WACLD,GAAG,WACHE,YAAY,iBACZ1C,SAAUK,KAAKa,cAGjB,4BAAQuB,KAAK,SAASE,QAAStC,KAAKc,OAApC,e,GA5EUZ,IAAMC,YC2BXoC,E,YA1Bb,WAAY7C,GAAQ,IAAD,8BACjB,4CAAMA,KAEDI,MAAQ,CACXY,UAAU,GAEZ,EAAK8B,QAAU,EAAKA,QAAQ5B,KAAb,gBANE,E,qEASXoB,GACNhC,KAAKH,SAAS,CAACa,SAASsB,M,+BAIxB,IAAIS,EAAUzC,KAAKF,MAAMY,SAA8C,kBAAC,EAAD,MAAnC,kBAAC,EAAD,CAAOmB,WAAY7B,KAAKwC,UAE5D,OACE,6BACGC,O,GAnBgBvC,IAAMC,WCOXuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.c7daec15.chunk.js","sourcesContent":["import React from 'react';\r\nimport Calendar from 'react-calendar';\r\n\r\nclass CalendarWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date(),\r\n    }\r\n  }\r\n\r\n  onChange = date => this.setState({ date })\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Calendar\r\n          onChange={this.onChange}\r\n          value={this.state.date}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarWidget;\r\n","import React from 'react';\r\nimport Calendar from './Calendar';\r\nimport './Main.css';\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"mainDiv\">\r\n              <div className=\"calendarDiv\">\r\n                  <Calendar />\r\n              </div>\r\n\r\n              <div className=\"upcomingShiftsDiv\">\r\n                  <h1>Upcoming Shifts</h1>\r\n                  <ul>\r\n                      <li>list for the next 2? weeks of upcoming shifts</li>\r\n                  </ul>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './login.css';\r\n\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n       username:\"\",\r\n       password:\"\",\r\n       loggedIn:false\r\n    };\r\n    this.onUsername = this.onUsername.bind(this);\r\n    this.onPassword = this.onPassword.bind(this);\r\n    this.login = this.login.bind(this);\r\n  }\r\n\r\n  login() {\r\n    console.log(\"well the function ran...\")\r\n    return fetch(\"/login\", {\r\n      method:\"POST\",\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n      })\r\n    })\r\n    .then((response) => response.json())\r\n    .then((responseJson) => {\r\n      if (responseJson.error == true) {\r\n          throw \"error\";\r\n      } else {\r\n        this.setState({\r\n          loggedIn: responseJson.login\r\n      });\r\n      }\r\n      this.props.onLoggedIn(this.state.loggedIn);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"unable to login at this time\");\r\n    })\r\n  }\r\n\r\n  onUsername(e) {\r\n    e.preventDefault();\r\n    this.setState({ username: e.target.value });\r\n  }\r\n\r\n  onPassword(e) {\r\n    e.preventDefault();\r\n    this.setState({ password: e.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"loginDiv\">\r\n        <h1 id=\"welcomeText\">Welcome!</h1>\r\n        <form className=\"loginForm\">\r\n\r\n          <div className=\"usernameDiv\">\r\n            <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            placeholder=\"Enter Username\"\r\n            onChange={this.onUsername}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"passwordDiv\">\r\n            <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            onChange={this.onPassword}\r\n            />\r\n          </div>\r\n          <button type=\"button\" onClick={this.login}>Login</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from './Main.js';\r\nimport Login from './login.js';\r\n\r\nclass ShiftSaver extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loggedIn: false,\r\n    }\r\n    this.onLogin = this.onLogin.bind(this);\r\n  }\r\n\r\n  onLogin(e) {\r\n    this.setState({loggedIn:e});\r\n  }\r\n\r\n  render() {\r\n    var toView = !this.state.loggedIn ? <Login onLoggedIn={this.onLogin}/>:<Main />;\r\n\r\n    return (\r\n      <div>\r\n        {toView}\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default ShiftSaver;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}